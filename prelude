'nop { { } } def
'get { nop nop lookup } def

'each list 1 dupn get def
'dict-keys dict 'keys get def
'import-keys {
  { 1 dupn 1 dupn get def } each
  pop
} def

'import {
  dup dict-keys import-keys 
} def

[ dict term-index construction query context io list arith string ] { import } each

'printf { format print pop } def
'show { "%v\n" printf } def
'show-stack { stack { show } each } def
'times { range { pop dup exec } each pop } def
'reverse { [ ] swap { cons } each } def

'eol. { } def
'mustache. { show } def
'tex { 'mustache. { "$%l$\n" printf 'mustache. ,{ dup $ } def } def } def
'svg { 'mustache. { "<svg class='capricon-formula' width='150px' height='2em' viewBox='0 0 100 100' xmlns=\"http://www.w3.org/2000/svg\"><text class='formula-text' x='0' y='100'>%g</text></svg>" printf 'mustache. ,{ dup $ } def } def } def
'raw { 'mustache. { "%s\n" printf 'mustache. ,{ dup $ } def } def } def
'br { "<br/>" print } def

'collect { { 'exports empty def ,{ } exec exports ,{ vocabulary } set-vocabulary } exec } def
'exports empty def
'export { exports swap dup $ insert 'exports swap def } def

[ 'source-dir 'output-dir 'cache-dir ] { "" def } each

'html-user-input "<div class=\"user-input interactive\"><button class=\"capricon-trigger\">Try It Out</button><label class=\"capricon-input-prefix\">&gt;&nbsp;<input type=\"text\" class=\"capricon-input\" /></label><pre class=\"capricon-output\"></pre></div>" def
'html-output {
   'comment { print pop } def
   'begin-code-paragraph {
     "" swap {
       dup "<button class=\"capricon-example\" data-code=\"%a\"><pre class=\"capricon\">%n</pre></button>%s" format
     } each
     "<div class=\"capricon-examples\">%s</div>" format
     
     swap "<pre class=\"capricon capricon-paragraph capricon-context\">%n</pre>" format
   
     html-user-input 3 shaft 2 shift 1 +
     "<span class=\"expand-then\" style=\"--num-lines: %v\"><div class=\"capricon-steps\">%s%s%s</div></span>" format
   
     "<label class=\"expansible box\"><input type=\"checkbox\" checked=\"checked\" /><span class=\"expand-else capricon-show\"></span><span class=\"expand-then capricon-hide\"></span>%s</label>" format
     "%s<div class=\"capricon-paragraphresult\">" printf
   } def
   'end-code-paragraph { "</div>" printf } def
   'begin-code-span { pop "<label class=\"expansible inline\"><span>" printf } def
   'end-code-span { "</span><input type=\"checkbox\"><span class=\"expand-then\"><code class=\"capricon capricon-steps\">%n</code></span></label>" printf } def
} def

'tex-output {
   'comment { print pop } def
   'begin-code-paragraph { pop swap pop "\\begin{code}\n%s\n\\end{code}\n" printf } def
   'end-code-paragraph { "\n" print pop } def
   'begin-code-span { pop "\\textit{" print pop } def
   'end-code-span { pop "}" print pop } def
} def

'module {
  dup source-dir "%s%s" format source
  
  dup 2 shaft 1 dupn
    output-dir "%s%s.html.md" format html-output redirect
    output-dir "%s%s.tex.md" format tex-output redirect
} def
'require { dup dup "  * Required module: [%s]\(%s.html\)\n" printf { ,{ dup } { module } collect } swap cache-dir "%s%s.mdo" format cache } def



